Spring Bean Life cycle :
	Instantiate
	populate property 
	set bean name 
	set bean factory 
	pre initalization
	intialize bean 
	post intialize
	reay to use 
	destroy 

Context Type :
	AnnotationConfigApplicationContext
	ClassPathXmlApplicationContext
	FileSystemXmlApplicationContext
	AnnotationConfigWebApplicationContex
	XmlWebApplicationContext 

What are the phases in an angular life cycle?
   1) ngOnChanges()
   2) ngOnInit
   3) ngDoCheck()
   4) ngAfterContentInit()
   5) ngAfterContentChecked
   6) ngAfterViewInit()
   7) ngAfterViewChecked()
   8) ngDestory()

 idempotant : get put 
 not : post 
 
 Each HttpMessageConverter implementation has one or several MIME Types associated with it. Spring uses the "Accept" header to determine the content type that the client is expecting.
 
 impliment AbstractHttpMessageConverter
 
 @RestController   = Controller and ResponseBody
 
 200  = status  0k 
 204  = no content 
 
 validation  => JSR303 impliment validator  
 lot of method 1. rejectIfEmptyOrWhitespace
				2.rejectIfEmpty
 
 How to get ServletContext and ServletConfig object in a Spring Bean?
	implimenting implements ServletContextAware, ServletConfigAware
 
 
 After receiving an HTTP request, DispatcherServlet consults the HandlerMapping (configuration files) to call the appropriate Controller. The Controller takes the request and calls the appropriate service methods and set model data and then returns view name to the DispatcherServlet. The DispatcherServlet will take help from ViewResolver to pickup the defined view for the request. Once view is finalized, The DispatcherServlet passes the model data to the view which is finally rendered on the browser.


Java based configuration  :

spring configuration file. 
	DefaultAnnotationHandlerMapping
     AnnotationMethodHandlerAdapter

Multiple Spring configuration file : Yes
contextConfigLocation

Difference :
context:annotation-config = Scanning and activating annotations in â€œalready registered beans
context:component-scan    =  Bean Registration + Scanning and activating annotations


ViewResolver  => interface implimentaion =>InternalResourceViewResolver 


MultipartResolver => to upload file in web application. 
	1. CommonsMultipartResolver 
	2. StandardServletMultipartResolver 
	 
	Add dependecy = >commons-fileupload  , commons-io
	Add in bean CommonsMultipartResolver

   public String save(@ModelAttribute("uploadForm") FileUploadForm uploadForm, Model map)
   
   
 Interceptor  : to intercept the request  : preHandle(), postHandle() and afterCompletion().
 
 
 handle exceptions in Spring MVC  :  impliment HandlerExceptionResolver  or provide beans SimpleMappingExceptionResol

	
